/**
 *
 *  #%L
 * geoserver-sync-core
 *  $Id:$
 *  $HeadURL:$
 * %%
 * Copyright (C) 2013 Moebius Solutions Inc.
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 *
 */

package com.moesol.geoserver.sync.core;



import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

// TODO should we use an array of int to optimize?
/**
 * @deprecated We don't think we should XOR SHA-1 values together...
 */
public class XorAccumulator {
	private static final Logger LOGGER = Logger.getLogger(XorAccumulator.class.getName());
	private byte[] m_result = new byte[20];

	public void update(byte[] digest) {
		xorSha1(m_result, digest);
		if (LOGGER.isLoggable(Level.FINER)) {
			LOGGER.log(Level.FINER, "acc: {0}", this);
		}
	}
	
	public String toString() {
		StringWriter sw = new StringWriter();
		PrintWriter pr = new PrintWriter(sw);
	    for (byte b : m_result) {
	    	pr.printf("%02x", 0xFF & b);
	    }
	    pr.close();
	    return sw.toString();
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.hashCode(m_result);
		return result;
	}

	// Generated by eclipse
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		XorAccumulator other = (XorAccumulator) obj;
		if (!Arrays.equals(m_result, other.m_result))
			return false;
		return true;
	}

	private static void xorSha1(byte[] result, byte[] elSha1) {
		if (result.length != elSha1.length) {
			throw new IllegalStateException("Bad length; expected=" + result.length + " actual=" + elSha1.length);
		}
		for (int i = 0; i < result.length; i++) {
			result[i] = (byte)(result[i] ^ elSha1[i]);
		}
	}

}
